h2. Concepts 

This section is a high level overview of concepts, technology choices, and implementation details that are at work in TNAPS.

TNAPS 3 uses the following main concepts:

# Component
# Application
# Library
# Instance

Instances are executable copies of Applications stored along with Components in TNAPS Library. 

This is a _very_ brief summary. The detailed explanation follows below.

h3. Component

In TNAPS everything begins with the Component. Component is the _only_ part of TNAPS that contains executable logic of the application. This executable logic can be written in one of the [[supported hosting environments|Supported Hosting]] (currently .NET and Java). [[Manifest]] of the [[component package]] determines which environment to create for the component.

Each hosting environment has its own adapter. During application execution TNAPS determines which component should be called and loads its code into the appropriate environment adapter. 

!img/diagrams/env-adapter.png!

Components use [[Message Transport Layer]] to communicate within application. This communication works between .NET and Java components as well. So, you can create TNAPS application from components written in different languages.

h4. What's Inside

Component is not just a set of .NET Assemblies and .JAR files, but a [[package|Component Package]] that contains binary resources and all other assets component logic uses during execution.

TNAPS comes with a set of default components that are most often used in every server application. For example, Hosting Component provides functionality to  expose other components through REST or SOAP services.

h4. Making Components 

You can use Visual Studio, Eclipse or any other IDE to code your component logic. Packaging component into distributable package needs calling for [[TNAPS SDK tools|SDK]].

To dive deeply into component ideas go to [[Components]].

h3. Application

As TNAPS is an application server, its central concept is certanly Application - piece of software with business logic valuable to end-user so much that he or she would like to call it. 

Each application in TNAPS is a composition of components linked together like building blocks to construct the required business logic. That is the core idea of [[component-driven development]] with TNAPS. You get existing components and [[combine them|Dependencies]] to archieve desired functionality.

Within application there are components called [[root components|Application Model]] that are executed right after launch of the application. Those root components [[reference|Dependencies]] other components and call them upon user request or internal trigger. Such root components are usually components that provide hosting and other infrastructure services for application.

!img/diagrams/appsample.png!

Applications are distributed like components - in packages. They may contain not only app's definitions, but required component packages as well. It allows building of self-sufficient [[application distribution package|Application Package]] that does not rely on external components availability.

h3. Library

!(right)img/diagrams/library.png!

Library is the main repository with TNAPS data. It contains all Components and Apps installed at local machine.

TNAPS Library greatly resembles standard library of magazines. Each component or application is put into Library and stored in multiple versions, just like standard library stores magazine issues. 

This feature of having [[multiple versions|Versions]] of the same app or component allows TNAPS to easily mitigate incompatibility risks. For example, each time a new version of the component is published into Library, all applications using previous versions of the component are still fully functional.

Once installed into the Library application or component may access its package files not only to retrive data, but to store it. It allows to provide components with simpliest [[persistance facilities|Persistance]]. 

Read more details about library in the [[special article|Library]].

h3. Instance

Application is stored in a Library. It is like a _template_ that is used to create Instances. Instance is a one copy of application with configuration created to execute it. 

One application in TNAPS Library can be used to create as many Instances as needed. For example, it can be the same CRM application, but hosted on different ports, using different datasources and serving different clients:

!img/diagrams/appinstance.png!

For every Instance you launch TNAPS executes separate process, so all Instances work independently.

Instance is binded strictly to exact version of an application. So if you have updated app in Library, existing instances reference previous version. TNAPS does not do automatic update of the instances as App may change to settings schema in the new version and existing properties would not be transfered.

h3. Core

TNAPS has a relatively small and robust kernel build on .NET / Mono. Almost all functionality is created using [[standart components]] bundled with TNAPS. It means that standart facilities application servers are known to provide are implemented itself as components. It gives more flexibility for the developer when creating any type of architecture for TNAPS Application. 
 

h3. Complete Schema

We have merged everything disscussed

!img/diagrams/architecture.png!

h3. Further Steps

To continue learning TNAPS check the following articles:

* [[Components]]
* [[Applications]]

If you are ready to start development with TNAPS go to [[Development]] section and write your [[first app|First App]].